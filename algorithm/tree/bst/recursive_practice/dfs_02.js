/**
1. 합이 같은 부분집합(DFS : 아마존 인터뷰)
  N개의 원소로 구성된 자연수 집합이 주어지면, 이 집합을 두 개의 부분집합으로 나누었을 때 두 부분집합의 원소의 합이 서로 같은 경우가 존재하면 “YES"를 출력하고, 그렇지 않으면 ”NO"를 출력하는 프로그램을 작성하세요.
  둘로 나뉘는 두 부분집합은 서로소 집합이며, 두 부분집합을 합하면 입력으로 주어진 원래의 집합이 되어 합니다.
  예를 들어 {1, 3, 5, 6, 7, 10}이 입력되면 {1, 3, 5, 7} = {6, 10} 으로 두 부분집합의 합이 16으로 같은 경우가 존재하는 것을 알 수 있습니다.

▣ 입력설명
  첫 번째 줄에 자연수 N(1<=N<=10)이 주어집니다.
  두 번째 줄에 집합의 원소 N개가 주어진다. 각 원소는 중복되지 않는다.

▣ 출력설명
  첫 번째 줄에 “YES" 또는 ”NO"를 출력한다.

▣ 입력예제 1
  6
  1 3 5 6 7 10

▣ 출력예제 1
  YES

 */

/**
1. 원소의 총 합을 구한다.
2. 재귀로 구한 각 부분집합내의 원소의 합을 구한다.
3. 구한 부분집합 원소의 합이 총합에서 뺀값과 같은지 검증 
 */
function solution(arr) {
  let answer = 'NO';
  let total = arr.reduce((a, c) => a + c, 0);
  let n = arr.length;

  function dfs(lv, sum) {
    if (answer === 'YES') return; // 콜스택에 계속 쌓이는거 방지
    if (lv === n) {
      if (total - sum === sum) answer = 'YES';
    } else {
      dfs(lv + 1, sum + arr[lv]);
      dfs(lv + 1, sum);
    }
  }
  dfs(0, 0);
  return answer;
}
/** 풀이 과정
 *  dfs(0,0)
 *      dfs(0+1, 0+1)
 *          dfs(1+1, 1+3)
 *              dfs(2+1, 4+5)
 *                  dfs(3+1, 9+6)
 *                      dfs(4+1, 15+7)
 *                          dfs(5+1, 22+10)
 *                              total(32) - 32
 *                          dfs(5+1, 22)
 *                              total(32) - 22
 *                      dfs(4+1, 15)
 *                          dfs(5+1, 15+10)
 *                              total(32) - 25
 *                          dfs(5+1, 15)
 *                              total(32) - 15
 *                  dfs(3+1, 9)
 *                      dfs(4+1, 9+7)
 *                          dfs(5+1, 16+10)
 *                              total(32) - 26
 *                          dfs(5+1, 16)
 *                              total(32) - 16 = 16 -> "YES"
 *                      dfs(4+1, 9)
 *              dfs(2+1, 4)
 *          dfs(1+1, 1)
 *      dfs(0+1, 0)
 *  dfs(0,0)
 */

console.log(solution([1, 3, 5, 6, 7, 10]));
